Funções
1.Leia o código abaixo:

Function minhaFunção(variável) {
return variável * 5
}

Console.log(minhaFunção(2))
Console.log(minhaFunção(10))

a)	O que vai ser impresso no console?
O código acima define uma função chamada "minhaFunção" que recebe um parâmetro "variável" e retorna o resultado da multiplicação dessa variável por 5. Em seguida, a função é chamada duas vezes com diferentes argumentos (2 e 10), e os resultados são impressos no console com console.log().
Portanto, no console, você verá a seguinte saída:
10
50

b)	O que aconteceria se retirasse os dois console.log e simplesmente invocasse a funçãominhaFunção(2) e minhaFunção(10)? O que apareceria no console?
Se você retirar os console.log e simplesmente invocar a função minhaFunção(2) e minhaFunção(10), o código calculará os resultados da função, mas não os exibirá no console. Isso significa que os resultados da função não seriam visíveis no console, e nada apareceria no console a menos que você use console.log para exibi-los.
Para ver os resultados, você precisaria manter os console.log ou usar algum outro método para exibir os valores retornados pela função.

2. Leia o código abaixo:

let textoDoUsuário = prompt(“insira um texto”);
const outraFunção = function(texto) {
return texto.toLowerCase().includes(“cenoura”)
}
Const resposta  = outrafunção(textoDoUsuário)
Console.log(resposta)
a.	Explique o que essa função faz e qual é sua utilidade 
Esta função realiza o seguinte:
1.Solicita ao usuário que insira um texto usando o prompt.
2.Define uma função anônima chamada outraFunção que recebe um argumento chamado texto.
3.Dentro da função, o texto inserido pelo usuário é convertido para letras minúsculas usando toLowerCase(), e então a função verifica se a palavra "cenoura" está incluída no texto usando includes(). A função retorna true se a palavra "cenoura" estiver presente no texto e false caso contrário.
4. A função outraFunção é chamada com o texto inserido pelo usuário, e o resultado é armazenado na constante resposta.
5.	Por fim, a resposta é exibida no console usando console.log.
A utilidade dessa função é verificar se a palavra "cenoura" está presente no texto inserido pelo usuário e retornar true ou false com base nessa verificação.

b. Determine qual será a saída no console para cada uma das 3 entradas do usuário: 
i. Eu gosto de cenoura 
ii. CENOURA é bom pra vista 
iii. Cenouras crescem na terra

i. Eu gosto de cenoura
•	Saída no console: true
•	A função retornará true porque a palavra "cenoura" está presente no texto inserido.
ii. CENOURA é bom pra vista
•	Saída no console: true
•	A função retornará true porque ela converte o texto para letras minúsculas antes de verificar a presença da palavra "cenoura", e "cenoura" está presente no texto em letras maiúsculas.
iii. Cenouras crescem na terra
•	Saída no console: false
•	A função retornará false porque a palavra "cenoura" não está presente no texto inserido.

B. Exercícios de escrita de código 
1. Escreva as funções explicadas abaixo: 
 a) A função não deve receber nenhum parâmetro e deve imprimir uma mensagem falando algumas informações sobre você, como:
 "Eu sou Caio, tenho 23 anos, moro em São Paulo e sou estudante." 
Troque o nome, idade, cidade e se é estudante ou não por informações sobre você. Lembrando que a função não possui entradas, apenas imprime essa mensagem. 

a) Função que imprime informações pessoais:
function informacoesPessoais () {

console.log("Eu sou Caio, tenho 23 anos, moro em São Paulo e sou estudante.”);
}
// Chamando a função para imprimir as informações pessoais.
informacoesPessoais(); 
Nesta função, não são necessários parâmetros, e ela simplesmente imprime as informações pessoais no console.

b) Agora escreva uma função que receba 4 parâmetros que correspondem às informações de uma pessoa: o nome ( string ), a idade ( number ), a cidade ( string ) e uma profissão ( string ). Ela deve retornar uma string que unifique todas as informações da pessoa em uma só mensagem com o template: 
Eu sou [NOME], tenho [IDADE] anos, moro em [ENDEREÇO] e sou [PROFISSÃO].

Function unificarInformações(nome, idade, cidade, profissão) {
return ‘Eu sou ${nome}, tenho ${idade} anos, moro em ${cidade} e sou ${profissão}.’;
}
//Exemplo de uso da função:
Const mensagem = unificarInformações(“João”, 30, “Rio de Janeiro”, “engenheiro”);
Console.log(mensagem);
Esta função recebe quatro parâmetros: nome, idade, cidade e profissão. Em seguida, ela retorna uma string formatada com todas essas informações unificadas em uma mensagem. O exemplo de uso mostra como você pode chamar a função e armazenar a mensagem resultante em uma variável para posterior uso ou exibi-la no console.

2. Escreva as funções explicadas abaixo: 
a) Escreva uma função que receba 2 números como parâmetros, e, dentro da função, faça a soma das duas entradas e retorne o resultado. Invoque a função e imprima no console o resultado. 
a) Função para somar dois números e retornar o resultado:
function somaNumeros(numero1, numero2) {
const resultado = numero1 + numero2;
return resultado;
}
//Exemplo de uso da função:
const resultadoSoma = somaNumeros(5, 3);
console.log(“A soma é:”, resultadoSoma);

Nesta função, você fornece dois números como parâmetros, a função os soma e retorna o resultado. O exemplo de uso mostra como chamar a função e imprimir o resultado no console.

 b) Faça uma função que recebe 2 números e retorne um booleano que informa se o primeiro número é maior ou igual ao segundo. 
b) Função para verificar se o primeiro número é maior ou igual ao segundo:

function VerificaMaiorOuIgual(num1, num2) {
return num1 >= num2;
}
//Exemplo de uso da função:
Const MaiorOuIgual = verificaMaiorOuIgual(8, 5);
Console.log (“É maior ou igual:”, maiorOuIgual);
Esta função recebe dois números como parâmetros e retorna true se o primeiro número for maior ou igual ao segundo, e false caso contrário.
c) Escreva uma função que receba um número e devolva um booleano indicando se ele é par ou não d) Faça uma função que recebe uma mensagem ( string ) como parâmetro e imprima o tamanho dessa mensagem, juntamente com uma versão dela em letras maiúsculas.
Função para verificar se um número é par:
Function VerificaPar (numero) {
Return numero % 2 === 0;
}
// Exemplo de uso da função:
const numeroPar = verificaPar(4);
console.log (“É par:”, numeroPar);
Esta função recebe um número como parâmetro e retorna true se o número for par, e false caso contrário.
d) Faça uma função que recebe uma mensagem ( string ) como parâmetro e imprima o tamanho dessa mensagem, juntamente com uma versão dela em letras maiúsculas.
Função para imprimir o tamanho da mensagem em letras maiúsculas:
Function imprimirTamanhoEMaiusculas(mensagem) {
Const tamanho = mensagem.length;
Const mensagemMaiusculas = mensagem.toUpperCase();
Cosole.log(‘Tamanho da mensagem: ${tamanho}’);
Console.log(‘Mensagem em letras maiúsculas: ${mensagemMaiusculas}’);
}
//Exemplo de uso da função:
imprimirTamanhoEMaiusculas(‘Olá, mundo!”);
Esta função recebe uma mensagem como parâmetro, calcula o tamanho da mensagem e a transforma em letras maiúsculas. Em seguida, imprime o tamanho e a versão em maiúsculas da mensagem no console.

3.Crie uma função para cada uma das operações básicas (soma, subtração, multiplicação e divisão). Em seguida, peça para o usuário inserir dois números e chame essas 4 funções com esses valores enviados pelo usuário sendo o argumento. Por fim, mostre no console o resultado das operações:
 Números inseridos: 30 e 3 
Soma: 33 
Diferença: 27
 Multiplicação: 90 
Divisão: 10
Aqui estão as funções para realizar as operações básicas (soma, subtração, multiplicação e divisão) e o código para solicitar os números ao usuário e mostrar os resultados no console:
//Função para somar dois números
Function soma(numero1, numero2) {
return numero 1 + numero 2;
}
//Função para subtrair dois números
Function subtração (numero1, numero2) {
return numero1 – numero2;
}
//Função para multiplicar dois números
Function multiplicação (numero1, numero2){
Return numero1 * numero2;
}
//Função para dividir dois números
Function divisão(numero1, numero2) {
If (numero2 === 0) {
Return “Divisão por zero não é permitida.”;
}
//Solicitar os números ao usuário
Const numero1 = parseFloat(prompt(“insira o primeiro numero:”));
Const numero2 = parseFloat(prompt(“insira o segundo numero:”));
//Calcular o resultado das operações
Const resultadoSoma = soma (numero1, numero2);
Const resultadoSubtração = subtração (numero1, numero2);
Const resultadoMultiplicação = multiplicação (numero1, numero2);
Const resultadoDivisão = divisão (numero1, numero2);

//Exibir os resultados no console
Console.log(“Numeros inseridos:”, numero1, “e”, número2);
Console.log(“Soma:” resultadoSoma);
Console.log(“Diferença:”, resultadoSubtração);
Console.log(“Multiplicação:”, resultadoMultiplicação);
Console.log(“Divisão”:”, resultadoDivisão);
Neste código, primeiro definimos as quatro funções para realizar as operações matemáticas básicas. Em seguida, solicitamos ao usuário que insira dois números, convertemos esses valores para números de ponto flutuante usando parseFloat, e calculamos os resultados das operações. Por fim, exibimos os resultados no console. Certifique-se de tratar o caso de divisão por zero para evitar erros.

Desafios 
1. Funções são trechos de códigos como quaisquer outros mas que podemos acessá-los mais de uma vez ao longo do código através de invocações/chamadas. Então, funções podem chamar/invocar outras funções também. Sua tarefa é escrever duas funções 
a) Escreva uma arrow function que recebe um parâmetro e imprime no console esse parâmetro 
a) Arrow function que imprime um parâmetro no console:
const imprimirParametro = (parâmetro) => {
console.log(parâmetro);
};
//Exemplo de uso da função:
imprimirParametro(“Olá, mundo!”);
Nesta função, usamos uma arrow function para imprimir o parâmetro passado como argumento no console.
b) Escreva outra arrow function que recebe dois valores como parâmetros mas nenhum retorno. Faça a soma entre esses valores e chame a sua primeira função mandando este resultado da soma como entrada para imprimi-lo
const somaEImprime = (Valor1, valor 2) => {
const resultadoSoma = valor1 + valor2;
imprimirParametro(ResultadoSoma);
};
/Exemplo de uso da função:
somaEImprime(10,20);
Nesta função, usamos uma arrow function para somar dois valores passados como argumentos e, em seguida, chamamos a primeira função imprimirParametro para imprimir o resultado da soma no console.



2. Faça uma função que execute o teorema de Pitágoras, recebendo dois catetos e calculando o valor da hipotenusa. Retorne este valor, invoque a função e imprima o resultado no console. 💡 Dica ☝ A fórmula do teorema é: hip² = a² + b² , onde hip é a hipotenusa e a e b são os catetos. É necessário isolar a hipotenusa, então ao final temos: hip = √(a² + b²)

Function calcularHipotenusa(catetoA, catetoB) {
Const hipotenusa = Math.sqrt(catetoA ** 2 + catetoB ** 2);
Return hipotenusa;
}
//Exemplo de uso da função:
Const cateto1 = 3;
Const cateto2 = 4;
Const resultado = calcularHipotenusa(cateto1, cateto2);
Console.log(‘A hipotenusa é: ${resultado}’);
Nesta função, calcularHipotenusa, você fornece os valores dos dois catetos como argumentos. A função utiliza a fórmula do Teorema de Pitágoras para calcular a hipotenusa (hipotenusa = √(catetoA² + catetoB²)), e então retorna o resultado. O exemplo de uso demonstra como calcular e imprimir a hipotenusa no console com valores específicos para os catetos. Você pode substituir os valores de cateto1 e cateto2 pelos que desejar.
